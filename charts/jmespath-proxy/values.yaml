# Default values for jmespath-proxy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Configuration for the JMESPath expression
jmespathExpression:
  # Direct value for the JMESPath expression (used if no other source is enabled)
  # Can be a multiline string using YAML block scalar (|)
  #
  # The JMESPath expression is applied to a context object with two keys:
  # - `body`: Contains the JSON payload from the incoming request body.
  # - `query_params`: Contains a dictionary of the parsed URL query parameters.
  #
  # Examples:
  #
  # # Example 1: Construct a new payload from body data and query parameters
  # # If the incoming body is {"id": 123, "value": 45.67} and the request is /?channel=web
  # # The expression context is {"body": {"id": 123, "value": 45.67}, "query_params": {"channel": "web"}}
  # # The resulting payload forwarded would be {"order_id": 123, "source": "web"}
  # value: |
  #   {
  #     order_id: body.id,
  #     source: query_params.channel
  #   }
  #
  # # Example 2: Manipulate Prometheus Alertmanager webhook payload
  # # Merges a new label "source" from query_params into each alert's labels array.
  # # Note the use of backticks (`) around string literals within the expression
  # # and escaping of quotes if the string contains them.
  # # If the incoming body contains alerts and the request is /?source=alertmanager
  # # The resulting payload will have a "source: alertmanager" label added to each alert.
  # value: |
  #   {
  #     alerts: body.alerts[*].{
  #       status: status,
  #       labels: merge(labels, `{"source": $.query_params.source}`)
  #     }
  #   }
  #
  value: ""
  # Source the JMESPath expression from a ConfigMap
  fromConfigMap:
    enabled: false
    useExisting: false # Set to true to use an existing ConfigMap
    name: "" # Name of the ConfigMap (required if enabled)
    key: "jmespath-expression" # Key in the ConfigMap

# Configuration for the Forward URL
forwardUrl:
  # Direct value for the Forward URL (used if no other source is enabled)
  value: ""
  # Source the Forward URL from a ConfigMap
  fromConfigMap:
    enabled: false
    useExisting: false # Set to true to use an existing ConfigMap
    name: "" # Name of the ConfigMap (required if enabled)
    key: "forward-url" # Key in the ConfigMap
  # Source the Forward URL from a Secret
  fromSecret:
    enabled: false
    useExisting: false # Set to true to use an existing Secret
    name: "" # Name of the Secret (required if enabled)
    key: "forward-url" # Key in the Secret

# Configuration for forwarding requests (basic auth)
forwardAuth:
  basicAuth:
    # Username for basic auth (optional)
    username: ""
    # Secret configuration for the password (optional)
    passwordSecret:
      # Set to true to enable using a secret for the password
      enabled: false
      # Set to true to use an existing secret instead of creating one
      useExisting: false
      # Name of the secret to use (required if enabled and useExisting is true)
      # If enabled and useExisting is false, a secret named {{ include "jmespath-proxy.fullname" . }}-auth will be created.
      name: ""
      # Key in the secret that contains the password (required if enabled)
      key: "forward-basic-auth-password"

# Other environment variables
env:
  # Timeout for HTTP requests in seconds
  HTTPX_TIMEOUT: "30.0"
  # Set to "false" to disable SSL verification (insecure)
  VERIFY_SSL: "true"

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/elohmeier/jmespath-proxy
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.7.0"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 3
readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 3
  failureThreshold: 3

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
